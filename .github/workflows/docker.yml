---
env:
  DOCKERHUB_REPOSITORY: mundialis/actinia-core
jobs:
  docker-g-version-flavor-matrix:
    if: "startsWith(github.ref, 'refs/tags/') != true"
    name: "build and push ${{ matrix.grass_version }}-latest-${{ matrix.flavor }}"
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        name: "Replace base images depending on version"
        run: |
            if [ "${{ matrix.grass_version }}" == "g79" ] && [ "${{ matrix.flavor }}" == "alpine" ]
            then sed -i "s+grass-py3-pdal:stable-alpine+grass-py3-pdal:latest-alpine+g" \
              docker/actinia-core-alpine/Dockerfile
              head -n1 docker/actinia-core-alpine/Dockerfile
            elif [ "${{ matrix.grass_version }}" == "g79" ] && [ "${{ matrix.flavor }}" == "ubuntu" ]
            then sed -i "s+grass-py3-pdal:stable-ubuntu+grass-py3-pdal:latest-ubuntu+g" \
              docker/actinia-core-ubuntu/Dockerfile
              head -n1 docker/actinia-core-ubuntu/Dockerfile
            else
              echo "No change of base images, use GRASS GIS 78"
            fi
      -
        id: meta
        name: "Create tag name"
        run: |
            tag="${DOCKERHUB_REPOSITORY}:${{ matrix.grass_version }}-latest-${{ matrix.flavor }}"
            echo "::set-output name=tags::$tag"
      -
        name: log
        run: "echo ${{ steps.meta.outputs.tags }}\n"
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      -
        name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          password: "${{ secrets.DOCKERHUB_TOKEN  }}"
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
      -
        id: docker_build
        name: "Build and push"
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: "docker/actinia-core-${{ matrix.flavor }}/Dockerfile"
          pull: true
          push: true
          tags: "${{ steps.meta.outputs.tags }}"
      -
        name: "Image digest"
        run: "echo ${{ steps.docker_build.outputs.digest }}"
    strategy:
      fail-fast: false
      matrix:
        flavor:
          - alpine
          - ubuntu
        grass_version:
          - g78
          - g79
  docker-main-latest:
    if: "startsWith(github.ref, 'refs/heads/main')"
    name: "build and push latest for main branch"
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        id: meta
        name: "Create tag name"
        run: |
            tag=${DOCKERHUB_REPOSITORY}:latest
            echo "::set-output name=tags::$tag"
      -
        name: log
        run: "echo ${{ steps.meta.outputs.tags }}"
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      -
        name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          password: "${{ secrets.DOCKERHUB_TOKEN  }}"
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
      -
        id: docker_build
        name: "Build and push"
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: docker/actinia-core-alpine/Dockerfile
          pull: true
          push: true
          tags: "${{ steps.meta.outputs.tags }}"
      -
        name: "Image digest"
        run: "echo ${{ steps.docker_build.outputs.digest }}"
  docker-release-g79:
    if: "startsWith(github.ref, 'refs/tags/')"
    name: "build and push release g79"
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: "Replace base image"
        run: |
            sed -i "s+grass-py3-pdal:stable-alpine+grass-py3-pdal:latest-alpine+g" \
              docker/actinia-core-alpine/Dockerfile
            head -n1 docker/actinia-core-alpine/Dockerfile
      -
        id: meta
        name: "Create tag name"
        run: |
            tag="${DOCKERHUB_REPOSITORY}:${GITHUB_REF##*/}.79"
            echo "::set-output name=tags::$tag"
      -
        name: log
        run: "echo ${{ steps.meta.outputs.tags }}\n"
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      -
        name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          password: "${{ secrets.DOCKERHUB_TOKEN  }}"
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
      -
        id: docker_build
        name: "Build and push"
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: docker/actinia-core-alpine/Dockerfile
          pull: true
          push: true
          tags: "${{ steps.meta.outputs.tags }}"
      -
        name: "Image digest"
        run: "echo ${{ steps.docker_build.outputs.digest }}"
  docker-sha-release-latest:
    name: "build and push release or latest"
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        id: meta
        name: "Create image and tag names"
        uses: docker/metadata-action@v3
        with:
          flavor: "latest=auto\n"
          images: mundialis/actinia-core
          tags: |
              type=ref,event=tag
              type=semver,pattern={{major}}.{{minor}}
              type=sha
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
      -
        name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          password: "${{ secrets.DOCKERHUB_TOKEN  }}"
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
      -
        id: docker_build
        name: "Build and push"
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: docker/actinia-core-alpine/Dockerfile
          pull: true
          push: true
          tags: "${{ steps.meta.outputs.tags }}"
      -
        name: "Image digest"
        run: "echo ${{ steps.docker_build.outputs.digest }}"
name: Docker
on:
  push:
    branches:
      - main
    paths-ignore:
      - docs/**
    tags:
      - "*.*.*"
  release:
    types:
      - published
